<?php

/**
 * Implements hook_menu().
 */
function workbench_moderation_extras_menu() {
  $items = array();

  // Module settings
  $items["admin/config/workbench/moderation_extras"] = array(
    'title' => 'Workbench Moderation Extras',
    'description' => 'Allows to set users to receive email notifications for certain transition states',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'workbench_moderation_extras_admin_settings',
    ),
    'access arguments' => array(
      'administer workbench moderation',
    ),
    'file' => 'workbench_moderation_extras.admin.inc',
  );

  return $items;
}

// let's try hook_cron to change states...

/**
 * Implements hook_cron().
 */
function workbench_moderation_extras_cron() {
  // get all published nodes that have been updated more then needed seconds ago
  $nids = _workbench_moderation_extras_get_published_state_nodes();

  // Change their state
  if (!empty($nids)) {
    foreach ($nids as $nid) {
      $node = node_load($nid);
      $node->workbench_moderation['updating_live_revision'] = 1;
      workbench_moderation_moderate($node, 'regular_review');
      node_save($node);
      // Ooops, not working like we thought it would.
    }
  }

  // Notify all needed users about it
}

function _workbench_moderation_extras_get_published_state_nodes() {
  $node_types = variable_get('workbench_moderation_extras_node_types');
  $nodes = db_select('workbench_moderation_node_history', 'wmnh');
  $nodes->fields('wmnh', array('nid'));
  $nodes->join('node', 'node', '(wmnh.nid=node.nid)');
  $nodes->condition('wmnh.state', 'published', '=');
  $nodes->condition('wmnh.published', 1, '=');
  if (is_array($node_types) AND !empty($node_types)) {
    $nodes_or = db_or();
    foreach ($node_types as $type) {
      $nodes_or->condition('node.type', $type);
    }
    $nodes->condition($nodes_or);
  }
  $nodes->condition('node.changed', time() - variable_get('workbench_moderation_extras_time', 3600 * 24 * 7), '<'); // only if lower then expiration time
  $nodes = $nodes->execute();
  $nids = array();
  foreach ($nodes as $node) {
    $nids[] = $node->nid;
  }
  return $nids;
}